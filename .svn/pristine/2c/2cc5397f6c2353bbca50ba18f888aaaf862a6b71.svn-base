package com.asia3d.web;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;























import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.asia3d.contents.service.AjaxContentsService;
import com.asia3d.member.service.AjaxMemberService;
import com.asia3d.ordermade.service.AjaxOrderMadeService;
import com.asia3d.util.DateUtil;
import com.asia3d.util.Log;
import com.asia3d.util.PropertyUtil;
import com.asia3d.util.SpriteMiddleImage;
import com.asia3d.util.StrUtil;

/**
 * @Class Name : Ajax3DBankMultipartController.java
 * @Description : Ajax3DBankMultipartController Controller Class
 * @Modification Information
 * @
 * @  수정일      수정자              수정내용
 * @ ---------   ---------   -------------------------------
 * @ 2016.04.18           최초생성
 *
 * @author 동양정보서비스
 * @since 2016.04.18
 * @version 1.0
 * @see
 *
 *  Copyright (C) by (주)쓰리디뱅크 All right reserved.
 */

@Controller
public class Ajax3DBankMultipartController {

	private static final Logger LOGGER = LoggerFactory.getLogger(Ajax3DBankMultipartController.class);
	
	@Autowired
	private  AjaxMemberService ajaxMemberService;
	
	@Autowired
	private  AjaxContentsService ajaxContentsService;
	
	@Autowired
	private  AjaxOrderMadeService ajaxOrderMadeService;
	
	static String SEED = "PicketTown12345";
	
	
	private String PROP_FILE = "/property/3dbank.properties";
	
	/*
	@RequestMapping(value = "/Ajax3DBankMultipartController.do", method = RequestMethod.POST )
	public ResponseEntity<String> getBeaconMultipartControllerJSON(
	*/
	@RequestMapping(value = "/Ajax3DBankMultipartController.do", method = RequestMethod.POST )
	@ResponseBody
	public Object getBeaconMultipartControllerJSON(		
											HttpServletRequest request,
											HttpServletResponse response,
											@RequestParam Map<String, String> params) {
												
		String jsondata = params.get("jsondata");
				
		boolean log_write = true;


		long start_time = System.currentTimeMillis(); 

		Log.print(LOGGER, "=====================================================================");
		Log.print(LOGGER, "/Ajax3DBankMultipartController.do 데이타수신 ");		
		Log.print(LOGGER, "=====================================================================");	
				
		ObjectMapper om = new ObjectMapper();
		
		Map<String, Object> resMap = new HashMap<String, Object>();
		
		try {
			jsondata = URLDecoder.decode(jsondata, "UTF-8");
			//System.out.println("URLDecoder.decode후=" +jsondata);
		} catch (Exception e2) {
			// TODO Auto-generated catch block
			Log.print(LOGGER, e2);
			resMap.put("retcode", "999");
			resMap.put("retmsg", "수신데이타 파싱에러:" + e2);
			return resMap;
		} 
		
		
		// 주석을 삭제한다.
		jsondata = StrUtil.removeComment(jsondata);
		jsondata = jsondata.replaceAll("”","\""); // 이상한 따옴표가...
		jsondata = jsondata.replaceAll("“","\""); // 이상한 따옴표가...

		if(log_write)
		{
			Log.print(LOGGER, "[URLDecoder.decode후..]\n>jsondata=" +jsondata);
		}
		
		List<MultipartFile> aMultipartFile = new ArrayList();
		if (request instanceof MultipartHttpServletRequest)
		{
		   // Log.print(LOGGER, "======= IS MultipartHttpServletRequest !!! =======");
		   MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		   aMultipartFile.addAll(multipartRequest.getFiles("file[]"));
		   aMultipartFile.addAll(multipartRequest.getFiles("conts_file[]"));
		   for(int i=0;i<aMultipartFile.size();i++)
		   {
			   // Log.print(LOGGER, "> getOriginalFilename: " + aMultipartFile.get(i).getOriginalFilename());
			   if(aMultipartFile.get(i).getOriginalFilename() == null || 
					   aMultipartFile.get(i).getOriginalFilename().trim().length() == 0)
			   {
				   aMultipartFile.remove(i);
				   i --; // 이거 중요..
			   }
		   }
		   // 디버깅
		   for(int i=0;i<aMultipartFile.size();i++) {
			   Log.print(LOGGER, "[" + i + "] >> getOriginalFilename()[" + aMultipartFile.get(i).getName() + "]:" + aMultipartFile.get(i).getOriginalFilename());
		   }
	   }
	   
	   String service_tp = null;
		try {

        	ObjectMapper mapper = new ObjectMapper();
        	HashMap<String, Object>  jsonMap  = mapper.readValue(jsondata, HashMap.class);
        	service_tp = (String) jsonMap.get("service_tp");
        	
        	Log.print(LOGGER, "service_tp=[" +service_tp +"]");
        	
			String inputcheckret = null;
			//getService_tp 값에 따른 case 처리 
			switch (DefineService.Service.valueOf(service_tp))
			{
				/*
				 *	회원정보관련 파일업로드 
				 */
				case	my_info_fileupload :
					if((inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"service_tp","p_login_id",
						/* 개별부 */	"upload_tp", "del_file", "ins_file"
					}))) != null) break;
					resMap = ajaxMemberService.my_info_fileupload(jsonMap, aMultipartFile);
					break;

						
				/*
				 *	 3D콘텐츠정보 등록/조회/수정
				 */
		 		case 	conts_3d_info_reg:
					if((inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"service_tp",
						/* 개별부 */	"crud_tp",
					}))) != null) break;
					if("c".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	
						"p_login_id","conts_name","conts_major","conts_minor", // 개별부			
					}))) != null) break;	
					if("r".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	"conts_uid", // 개별부			
					}))) != null) break;
					if("u".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	"p_login_id","conts_uid", // 개별부			
					}))) != null) break;	
					if("d".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	"p_login_id","conts_uid", // 개별부			
					}))) != null) break;
					resMap = ajaxContentsService.conts_3d_info_reg(jsonMap, aMultipartFile);
					break;		

				/*
				 *	 출력이력정보 등록/조회/수정
				 */
		 		case 	print_history_info_reg:
					if((inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"service_tp",
						/* 개별부 */	"crud_tp",
					}))) != null) break;
					if("c".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"user_uid","p_login_id",
						/* 개별부 */	"conts_uid", 			
					}))) != null) break;	
					if("r".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	
						/* 개별부 */	"conts_uid", 			
					}))) != null) break;
					if("u".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"user_uid","p_login_id",
						/* 개별부 */	"conts_uid", 				
					}))) != null) break;					
					if("d".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"user_uid","p_login_id",
						/* 개별부 */	"conts_uid", 				
					}))) != null) break;
					resMap = ajaxContentsService.print_history_info_reg(jsonMap, aMultipartFile);
					break;		

				/*
				 *	유저별 이미지 임시 업로드 (실시간으로 1차업로드 후 저장시 유효함)
				 */
				case	file_tmp_updownload :
					if((inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"service_tp","p_login_id",
						/* 개별부 */	"updownload_tp", 
					}))) != null) break;
					resMap = ajaxMemberService.file_tmp_updownload(jsonMap, request, response, aMultipartFile);
					break;

				/*
				 *	 공지사항 등록(수정/삭제)
				 */
		 		case 	notice_reg:
					if((inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"service_tp",
						/* 개별부 */	"svc_tp","crud_tp",
					}))) != null) break;
					if("c".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"user_uid","p_login_id",
						/* 개별부 */	"title","conts",		
					}))) != null) break;	
					if("r".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	
						/* 개별부 */	"notice_seq", 			
					}))) != null) break;
					if("u".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	
						/* 개별부 */	"notice_seq", 				
					}))) != null) break;					
					if("d".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"user_uid","p_login_id",
						/* 개별부 */	"notice_seq", 				
					}))) != null) break;
					resMap = ajaxMemberService.notice_reg(jsonMap, request, response, aMultipartFile);
					
					break;	
					
				/*
				 *	 공지사항 조회 리스트
				 */
		 		case 	notice_list:
					if((inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"service_tp",
						/* 개별부 */	"svc_tp","page_num",
					}))) != null) break;
					
					resMap = ajaxMemberService.notice_list( jsonMap, request);
					break;		
					
					
					
				/*
				 *	 주문제작 등록/조회/수정
				 */
		 		case 	order_made_info:
					if((inputcheckret = check_intpufield(jsonMap,(new String[]
					{	/* 공통부 */	"service_tp",
						/* 개별부 */	"crud_tp",
					}))) != null) break;
					if("r".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	"make_uid", // 개별부			
					}))) != null) break;
					if("c".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	
						"user_uid","appr_uid", // 개별부			
					}))) != null) break;	
					if("u".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	"user_uid","make_uid", // 개별부			
					}))) != null) break;	
					if("d".equals(jsonMap.get("crud_tp")) && (inputcheckret = check_intpufield(jsonMap,(new String[]
					{	"user_uid","make_uid", // 개별부			
					}))) != null) break;
					resMap = ajaxOrderMadeService.order_made_info(jsonMap, aMultipartFile);
					break;		
				
		 		case disp_reg :
		 			if((inputcheckret = check_intpufield(jsonMap,(new String[] {}))) != null) 
		 				break;
		 			
		 			resMap = ajaxContentsService.disp_reg(jsonMap, aMultipartFile);
		 			break;	
				
		 		case controller_mng :
		 			if((inputcheckret = check_intpufield(jsonMap,(new String[] {}))) != null) 
		 				break;
		 			
		 			resMap = ajaxContentsService.controller_mng(jsonMap, aMultipartFile);
		 			break;					
					
				default :
					resMap.put("retcode", "991");
					resMap.put("retmsg", "알수없는 구분값임.service_tp=[" +service_tp+ "]");
					break;
			}
			
			if(inputcheckret != null)
			{
				resMap.put("retcode", "992");
				resMap.put("retmsg", inputcheckret);
			}

		} catch (Exception e) {
			
			Log.print(LOGGER, "error jsondata 수신=" + jsondata);
			
			try {
				resMap.put("retcode", "999");
				resMap.put("retmsg", "시스템오류입니다.");
				
			} catch (Exception e1) {}
			
			System.out.println("JSONController error. : [" + e + "]");
			Log.print(LOGGER, "JSONController error...");
			Log.print(LOGGER, e);
		}
	
		resMap.put("service_tp", service_tp);
		
		String jsonString = null;
		try {
			jsonString = om.writeValueAsString(resMap);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString = e.getMessage();
		}
		
		Log.print(LOGGER, "결과:" + jsonString + "");
		long end_time = System.currentTimeMillis(); 
		Log.print(LOGGER, "/Ajax3DBankMultipartController.do 결과전송, 처리시간(TimeMillis)=[" + (end_time-start_time) + "]");
		Log.print(LOGGER, "=====================================================================\n\r");

		/*
		HttpHeaders responseHeaders = new HttpHeaders();
		responseHeaders.add("Content-Type", "text/html; charset=UTF-8");
		return new ResponseEntity<String>(jsonString, responseHeaders,	HttpStatus.CREATED);	
		*/
		
		return resMap;
	}

	
	/*
	 * 이미지 다운로드
	 * http://3dbank.xyz:9011/downStlImg.do?file=7e389efd2f7d4cffb509dc76a95bc7b5_%EC%84%9D%EA%B5%B4%EC%95%94%EC%84%9D%EA%B5%B4%20%EA%B0%90%EC%8B%A4%EB%B3%B4%EC%82%B4%EC%83%81_1.jpg
	 */
	@RequestMapping(value = "downStlImg", method = RequestMethod.GET)
	public ModelAndView down(HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map<String, String> params) throws Exception{

		Log.print(LOGGER, "## ModelAndView downStlImg params:" + params);
		
		PropertyUtil pl = new PropertyUtil(PROP_FILE);
		
		//File file = new File("C:/Users/lys01/Desktop/stl_test/","20.stl");
		File file = new File(pl.get("IMG_UPLOAD_PATH"),params.get("file"));
		
		
		request.setAttribute("fileName", params.get("file"));   //다운 받을 시 이름을 결정합니다. 빼게되면 기존에 저장된 이름으로 받습니다.  

		Log.print(LOGGER, "file size:[" + pl.get("IMG_UPLOAD_PATH") + params.get("file") + "]:" + file.length());
		
		if(file == null || file.length() == 0) {
			Log.print(LOGGER, "## FileNot Found!!!");
			throw new Exception("Error!! file size:[" + pl.get("IMG_UPLOAD_PATH") + params.get("file") + "]:" + file.length());
			
		}
		
		return new ModelAndView("fileDownloadView","fileDownload", file);
	 }

	
	/*
	 * 동적 생성된 Sprite 이미지 다운로드
	 * http://3dbank.xyz:9011/downStlSpriteImg.do?file=7e389efd2f7d4cffb509dc76a95bc7b5_%EC%84%9D%EA%B5%B4%EC%95%94%EC%84%9D%EA%B5%B4%20%EA%B0%90%EC%8B%A4%EB%B3%B4%EC%82%B4%EC%83%81_1.jpg
	 */
	@RequestMapping(value = "downStlSpriteImg", method = RequestMethod.GET)
	public ModelAndView downStlSpriteImg(HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map<String, String> params) throws Exception{

		Log.print(LOGGER, "## ModelAndView downStlSpriteImg params:" + params);
		
		PropertyUtil pl = new PropertyUtil(PROP_FILE);
		
		File file = new File(pl.get("IMG_UPLOAD_PATH_SPRITE_IMG"),params.get("file"));
		
		request.setAttribute("fileName", params.get("file"));   //다운 받을 시 이름을 결정합니다. 빼게되면 기존에 저장된 이름으로 받습니다.  

		Log.print(LOGGER, "file size:[" + pl.get("IMG_UPLOAD_PATH_SPRITE_IMG") + params.get("file") + "]:" + file.length());
		
		if(file == null || file.length() == 0) {
			Log.print(LOGGER, "## IMG_UPLOAD_PATH_SPRITE_IMG File Create!!!");
			SpriteMiddleImage sp = new SpriteMiddleImage(
		  										pl.get("IMG_UPLOAD_PATH") + params.get("file") , 
		  										pl.get("IMG_UPLOAD_PATH_SPRITE_IMG") + params.get("file"), 
		  										600, 0.75);
	    	sp.saveSpliteImage();
		}
		
		return new ModelAndView("fileDownloadView","fileDownload", file);
	 }
	

	/*
	 * STL 다운로드
	 */
	@RequestMapping(value = "downStlZIP.do", method = RequestMethod.POST)
	public ModelAndView downStl(
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map<String, String> params) throws Exception{

		String jsondata = params.get("jsondata");
		
		// 주석을 삭제한다.
		jsondata = StrUtil.removeComment(jsondata);
		jsondata = jsondata.replaceAll("”","\""); // 이상한 따옴표가...
		jsondata = jsondata.replaceAll("“","\""); // 이상한 따옴표가...
		
		ModelAndView view = new ModelAndView();
		
		ObjectMapper om = new ObjectMapper();
		Map<String, Object> resMap = new HashMap<String, Object>();
		
		HashMap<String, Object>  jsonMap  = new HashMap();
		try {
			jsondata = URLDecoder.decode(jsondata, "UTF-8");
			Log.print(LOGGER, "## jsondata:" + jsondata);
        	ObjectMapper mapper = new ObjectMapper();
        	jsonMap  = mapper.readValue(jsondata, HashMap.class);
		} catch (Exception e2) {
			// TODO Auto-generated catch block
			Log.print(LOGGER, e2);
			view.addObject("retcode", "999");
			view.addObject("retmsg", "수신데이타 파싱에러:" + e2);
			
			response.setHeader("retcode", "999");
			response.setHeader("retmsg", "수신데이타 파싱에러:" + e2);
			
			return view;
		} 
		
		Log.print(LOGGER, "## ModelAndView downStlZIP jsonMap:" + jsonMap);
		
		String inputcheckret = check_intpufield(jsonMap,(new String[]
				{	/* 공통부 */	"user_uid","p_login_id","conts_uid"
				}));
				
		if(inputcheckret != null)
		{
			view.addObject("retcode", "992");
			view.addObject("retmsg", inputcheckret);
			
			response.setHeader("retcode", "992");
			response.setHeader("retmsg", inputcheckret);
			return view;
		}

		PropertyUtil pl = new PropertyUtil(PROP_FILE);
		
		resMap = ajaxContentsService.make_downstlfile(jsonMap, request, response);
		
		//File file = new File("C:/Users/lys01/Desktop/stl_test/","20.stl");
		File file = new File(pl.get("IMG_UPLOAD_PATH"),jsonMap.get("conts_uid") + ".zip");
				
		request.setAttribute("fileName", resMap.get("download_filename"));   //다운 받을 시 이름을 결정합니다. 빼게되면 기존에 저장된 이름으로 받습니다.  

		Log.print(LOGGER, "file size:[" + pl.get("IMG_UPLOAD_PATH") + jsonMap.get("conts_uid") + ".zip" + "]:" + file.length());
		
		if(file == null || file.length() == 0) {
			Log.print(LOGGER, "## FileNot Found!!! ["  + file + "]");
			
			view.addObject("retcode","999");
			view.addObject("retmsg", "## FileNot Found!!! ["  + file + "]");
			
			response.setHeader("retcode","999");
			response.setHeader("retmsg", "## FileNot Found!!! ["  + file + "]");
			return view;
		}
		
		/*
		 * 파일을 다운로드 받을수 있는 권한인지 체크
		 * 파일을 다운로드 카운트증가
		 */
		try {
			resMap = ajaxContentsService.check_downstlfile(jsonMap, request, response);
			view.addObject("retcode", resMap.get("retcode"));
			view.addObject("retmsg",  resMap.get("retmsg"));
		} catch(Exception e) {
			Log.print(LOGGER, e);
			
			view.addObject("retcode","999");
			view.addObject("retmsg", ""+e);
			
			response.setHeader("retcode","999");
			response.setHeader("retmsg", ""+e);
			return view;
		}
		
		Log.print(LOGGER, "#### resMap:" + resMap);
		
		response.setHeader("retcode",(String)resMap.get("retcode"));
		response.setHeader("retmsg",(String)resMap.get("retmsg"));
		
		if(!"000".equals(resMap.get("retcode"))) {
			return view;
		}
		Log.print(LOGGER, "#### start download!! #####");
				
		return new ModelAndView("fileDownloadView","fileDownload", file);
	 }

	
	private String check_intpufield(Map<String, Object>  jsonMap, String field[]) {

		String retmsg = null;
		
		for(int i=0;i<field.length;i++)
		{
			try
			{
				if(jsonMap.get(field[i]) == null ||String.valueOf(jsonMap.get(field[i])).trim().length() == 0)
				{
					retmsg = "입력필드를 확인하세요. 필드[" + field[i] + "]가 없거나 데이타가 셋팅이 안되어있음.";
					break;
				}
			}catch(Exception ee)
			{
				Log.print(LOGGER, ee);
			}
			
			if(field[i].equals("inq_start_date") || field[i].equals("inq_end_date"))
			{
				if(!DateUtil.checkDateFormat((String) jsonMap.get(field[i]), "yyyyMMdd"))
				{
					retmsg = "inq_start_date/inq_end_date는 yyyyMMdd 형식입니다. ";
					break;
				}
				
				if(StrUtil.bigCompareTo((String) jsonMap.get("inq_start_date"), (String) jsonMap.get("inq_end_date")) > 0)
				{
					retmsg = "시작날짜가 종료날짜보다 큽니다.";
					break;
				}
			}
		}
		return retmsg;
	}

}