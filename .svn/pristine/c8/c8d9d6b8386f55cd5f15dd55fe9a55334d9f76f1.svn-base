package com.asia3d.ordermade.service.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import kr.co.nicepay.module.lite.NicePayWebConnector;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.multipart.MultipartFile;

import com.asia3d.contents.service.impl.stl.Meshconvs;
import com.asia3d.contents.service.impl.stl.STL2Images;
import com.asia3d.contents.service.impl.stl.STL2LoaderXYZ;
import com.asia3d.contents.service.impl.stl.STL2VolumeWeightCalculator;
import com.asia3d.member.service.impl.AjaxMemberDAO;
import com.asia3d.ordermade.service.AjaxOrderMadeService;
import com.asia3d.util.FileUtil;
import com.asia3d.util.Log;
import com.asia3d.util.PropertyUtil;
import com.asia3d.util.ZIPCompress;

@Service("ajaxOrderMadeService")
public class AjaxOrderMadeServiceImpl implements AjaxOrderMadeService {
	
	private String PROP_FILE = "/property/3dbank.properties";
	
	private static final Logger LOGGER = LoggerFactory.getLogger(AjaxOrderMadeServiceImpl.class);
	
	@Autowired
	private AjaxMemberDAO ajaxMemberDAO;
	
	@Autowired
	private AjaxOrderMadeDAO ajaxOrderMadeDAO;
		
	@Resource(name = "messageSource")
	MessageSource messageSource;

	/*
	 *	주문제작 등록/조회/수정
	 */
	@Override
	public Map<String, Object> order_made_info(HashMap<String, Object> jsonMap, List<MultipartFile> aMultipartFile) throws Exception {
		if("r".equals(jsonMap.get("crud_tp"))) 
		{
			jsonMap = order_made_info_r(jsonMap);
			return jsonMap;
		}
		
		@SuppressWarnings("unchecked")
		HashMap<String, Object> userInfo = ajaxMemberDAO.selectUser_by_user_uid(jsonMap);
		if(userInfo == null)
		{
			jsonMap = new HashMap<String, Object>();
			jsonMap.put("retcode", 	"991");
			jsonMap.put("retmsg",	"존재하지 않은 사용자정보입니다.");	
			return jsonMap;
		}

		if("c".equals(jsonMap.get("crud_tp"))) 
		{
			jsonMap = order_made_info_c(jsonMap, aMultipartFile);
		}
		else if("u".equals(jsonMap.get("crud_tp"))) 
		{
			jsonMap = order_made_info_u(jsonMap, aMultipartFile);
		}
		else if("d".equals(jsonMap.get("crud_tp"))) 
		{
			jsonMap = order_made_info_d(jsonMap, aMultipartFile);
		}
		
		return jsonMap;
	}
	
	/*
	 * 3D주문제작 등록
	 */
	@SuppressWarnings("unchecked")
	public HashMap<String, Object> order_made_info_c(HashMap<String, Object> jsonMap, List<MultipartFile> aMultipartFile) throws Exception {
		
		PropertyUtil pl = new PropertyUtil(PROP_FILE);
		
		ajaxOrderMadeDAO.insertMakeInfo(jsonMap);
		
		ArrayList<?> conts_file = (ArrayList<?>) jsonMap.get("conts_file");
		
		Log.print(LOGGER, "conts_file=[" + conts_file + "]");
	
		for(int j=0;j<aMultipartFile.size();j++) {
			Log.print(LOGGER, "업로드할 파일[" + j + "]=[" +aMultipartFile.get(j).getOriginalFilename() +"]");
		}
		
		int fileIndex = 0;
		for(int j=0;j<conts_file.size();j++) {
			HashMap<String, Object>  contents = (HashMap<String, Object>) conts_file.get(j);
			contents.put("make_uid", jsonMap.get("make_uid"));
			
			if(contents.get("conts_file_name") != null && 
					((String)contents.get("conts_file_name")).length() > 0) {

				// 업로드된 파일명과 동일한지 체크한다.
				if("file[]".equals(aMultipartFile.get(fileIndex).getName())) {
					String conts_save_name = FileUtil.uploadFile(pl.get("IMG_UPLOAD_PATH"), aMultipartFile.get(fileIndex));
					contents.put("conts_save_name", conts_save_name);
					
					// STL파일이라면 몇가지 정보를 얻는다.
					if(	conts_save_name.toUpperCase().endsWith(".STL")) 
					{	
						settingSTLInformation(contents, pl.get("IMG_UPLOAD_PATH"), conts_save_name);
					}
					fileIndex ++;
				}
				else if("conts_file[]".equals(aMultipartFile.get(fileIndex).getName())) {
					String conts_save_name = FileUtil.uploadFile(pl.get("IMG_UPLOAD_PATH"), aMultipartFile.get(fileIndex));
					contents.put("conts_save_name", conts_save_name);
					fileIndex ++;
				}
			}
			ajaxOrderMadeDAO.insertMakeAttchFile(contents);
		}
		
		
		// 견적[업체]정보(ESTIMATE_INFO) 추가
		if(jsonMap.get("estimateinfo_list") != null) {
			ArrayList<?> estimateinfo_list = (ArrayList<?>) jsonMap.get("estimateinfo_list");
			for(int i=0;i<estimateinfo_list.size();i++) {
				((HashMap<String, Object>) estimateinfo_list.get(i)).put("make_uid", jsonMap.get("make_uid"));
				ajaxOrderMadeDAO.insertEstimateInfo((HashMap<String, Object>) estimateinfo_list.get(i));
			}
		}
		
		
		// make_uid 기준으로 dfx, off, ply, 3ds, wr, stl, obj 관련 파일을 분석한다.
		try { convMeshProcessByMake_uid(String.valueOf(jsonMap.get("make_uid")));	} catch(Exception e) {	Log.print(LOGGER, e);	}
		jsonMap.put("retcode", 	"000");
		jsonMap.put("retmsg",	"정상적으로 등록되었습니다.");
		
		return jsonMap;
	}
	
	/*
	 * make_uid 기준으로 dfx, off, ply, 3ds, wr, stl, obj 관련 파일을 분석한다.
	 */
	private void convMeshProcessByMake_uid(String make_uid) throws Exception {
		
		/*
		if(true) 
		{
			Log.print(LOGGER, "## EXIT !! convMeshProcessByMake_uid.. ");
			return;
		}
		*/
		
		
		// TODO Auto-generated method stub
		Log.print(LOGGER, "## convMeshProcessByMake_uid make_uid:[" + make_uid + "]");
		
		PropertyUtil pl = new PropertyUtil(PROP_FILE);
		
		HashMap<String, Object> map = new HashMap();
		map.put("make_uid", make_uid);
		
		List<?> contsfile_list = ajaxOrderMadeDAO.selectMakeAttchFileList(map);
		
		// IMG_UPLOAD_PATH=/data/3dbank/upload_data/
		// MESHCONV_DATA=/data/3dbank/upload_data/meshconv/

		String meshconv_data_path = pl.get("MESHCONV_DATA") + "make_uid_" + make_uid + File.separator;
		
		Log.print(LOGGER, "## meshconv_data_path :[" + meshconv_data_path + "]");
		FileUtil.deleteFolder(meshconv_data_path);
		
		ArrayList aFile = new ArrayList();
		for(int i=0;i<contsfile_list.size(); i++) {
			HashMap contsfile = (HashMap)contsfile_list.get(i);
			Log.print(LOGGER, "## contsfile_list.get(" + i + ") :" + contsfile);
			if("01".equals(contsfile.get("conts_tp")) && contsfile.get("conts_save_name") != null && ((String)contsfile.get("conts_save_name")).trim().length() > 0  ) 
			{		
				Log.print(LOGGER, "### copyFile... ");
				if(!FileUtil.isDirExist(meshconv_data_path)) {
					FileUtil.makeDir(meshconv_data_path);
				}

				FileUtil.copyFile(	pl.get("IMG_UPLOAD_PATH") + contsfile.get("conts_save_name"),
									meshconv_data_path + contsfile.get("conts_file_name"));
			}
		}
		
		
		for(int i=0;i<contsfile_list.size(); i++) {
			HashMap contsMap = (HashMap)contsfile_list.get(i);
			if("01".equals(contsMap.get("conts_tp")) && contsMap.get("conts_save_name") != null && ((String)contsMap.get("conts_save_name")).trim().length() > 0  ) 
			{
				
				if(((String)contsMap.get("conts_file_name")).toUpperCase().endsWith(".OBJ")) {
					
					String stlfile = (String)contsMap.get("conts_file_name");
							
					Meshconvs meshconvs = new Meshconvs(meshconv_data_path, stlfile, "stl");
					stlfile = meshconvs.makefile(meshconv_data_path, stlfile.substring(0, stlfile.lastIndexOf(".")));
					
					// meshconv_data_path, stlfile
					// /data/3dbank_dev/upload_data/meshconv/make_uid_1/bma001008.stl 를 /data/3dbank_dev/upload_data 로 복사한다.
					UUID randomeUUID = UUID.randomUUID();
					String copy_stl_file_name = randomeUUID.toString().replaceAll("-", "") + "_" + stlfile;
					
					FileUtil.copyFile(meshconv_data_path + stlfile, pl.get("IMG_UPLOAD_PATH") + copy_stl_file_name);
					
					settingSTLInformation(contsMap, pl.get("IMG_UPLOAD_PATH"), copy_stl_file_name);
					
					Log.print(LOGGER, "## after settingSTLInformation contsfile:" + contsMap );
					
					int iret = ajaxOrderMadeDAO.updateMakeAttchFile(contsMap);
					
					Log.print(LOGGER, "## after ajaxOrderMadeDAO.updateMakeAttchFile iret:" + iret );
					
					// "stl_thumnail":"c3b0aa31e40a4e3ea535262a11a8b457_bma001008.stl.conv.png" 정보를 통해서...
					// conts_save_name, conts_file_name 를 유추해서...
					// stl에 관련된 내용도 추가한다.
					setData_conts_save_name_conts_file_name(contsMap);
					//ajaxOrderMadeDAO.insertMakeAttchFile(contsMap);
				}
			}
		}
	}
	
	private void setData_conts_save_name_conts_file_name(HashMap contsMap) {
		// TODO Auto-generated method stub
		String stl_thumnail = (String)contsMap.get("stl_thumnail");
		String conts_save_name = stl_thumnail.substring(0, stl_thumnail.lastIndexOf(".stl") + 4);
		String conts_file_name = conts_save_name.substring(conts_save_name.indexOf("_") + 1);
		
		contsMap.put("conts_save_name", conts_save_name);
		contsMap.put("conts_file_name", conts_file_name);
	}

	
	/*
	 * stl파일에 대한 추가적인 기능을 얻는다.
	 */
	private void settingSTLInformation(HashMap<String, Object> contents,  String stlpath, String stlfile)
	{

		try {
			STL2LoaderXYZ stl2LoaderXYZ = new STL2LoaderXYZ();
			stl2LoaderXYZ.load(stlpath, stlfile);
			contents.put("stl_x", stl2LoaderXYZ.getX());
			contents.put("stl_y", stl2LoaderXYZ.getY());
			contents.put("stl_z", stl2LoaderXYZ.getZ());
		} catch (Exception e) {	e.printStackTrace(); }
		
		try {
			STL2Images stl2Images = new STL2Images();
			stl2Images.load(stlpath, stlfile);	
			
			int separatorIdx = stl2Images.getConvRetImage().lastIndexOf(File.separator);
			if(separatorIdx > 0)
			{
				String filename = stl2Images.getConvRetImage().substring(separatorIdx + 1);
				contents.put("stl_thumnail", filename);
			}
			
		} catch (Exception e) {	e.printStackTrace(); }
		
		try {
			STL2VolumeWeightCalculator srl2VolumeWeightCalculator = new STL2VolumeWeightCalculator();
			srl2VolumeWeightCalculator.load(stlpath, stlfile);		
			contents.put("stl_volume", srl2VolumeWeightCalculator.getVolume());
			contents.put("stl_weight", srl2VolumeWeightCalculator.getWeight());
		} catch (Exception e) {	e.printStackTrace(); }	
	
	}
	
	/*
	 * 주문제작 조회
	 */
	public HashMap<String, Object> order_made_info_r(HashMap<String, Object> jsonMap) throws Exception {
		
		HashMap<String, Object> select_map = ajaxOrderMadeDAO.selectMakeInfo(jsonMap);
		
		if(select_map == null)
		{
			jsonMap = new HashMap<String, Object>();
			jsonMap.put("retcode", 	"991");
			jsonMap.put("retmsg",	"존재하지 않는 데이타입니다.");	
			return jsonMap;
		}
		
		List<?> contsfile_list = ajaxOrderMadeDAO.selectMakeAttchFileList(select_map);
		select_map.put("conts_file", contsfile_list);
		
		List<?> estimateinfo_list = ajaxOrderMadeDAO.selectEstimateInfoList(select_map);
		select_map.put("estimateinfo_list", estimateinfo_list);
		
				
		select_map.put("retcode", 	"000");
		select_map.put("retmsg",	"정상적으로 조회되었습니다.");
		
		return select_map;
	}	
	
	/*
	 * 주문제작 업데이트
	 */
	public HashMap<String, Object> order_made_info_u(HashMap<String, Object> jsonMap, List<MultipartFile> aMultipartFile) throws Exception {
		
		// 주문제작정보 업데이트
		int upt = ajaxOrderMadeDAO.updateMakeInfo(jsonMap);
		Log.print(LOGGER, "ajaxOrderMadeDAO.updateMake3DInfo upt=[" +upt +"]");
		
		PropertyUtil pl = new PropertyUtil(PROP_FILE);
		
		ArrayList del_file = (ArrayList) jsonMap.get("del_file");
		ArrayList ins_file = (ArrayList) jsonMap.get("ins_file");
		
		if(del_file == null) { del_file = new ArrayList();  }
		if(ins_file == null) { ins_file = new ArrayList();  }
	
		Log.print(LOGGER, "del_file=[" +del_file +"]");
		Log.print(LOGGER, "ins_file=[" +ins_file +"]");
		
		
		for(int i=0;i<del_file.size();i++) {
			jsonMap.put("make_uid", jsonMap.get("make_uid"));
			jsonMap.put("conts_save_name", del_file.get(i));
			// db에서 삭제
			int ret = ajaxOrderMadeDAO.deleteMakeAttchFile(jsonMap);
			Log.print(LOGGER, "ajaxOrderMadeDAO.deleteMakeAttchFile ret=[" +ret +"]");
			// 실제 물리파일 삭제
			FileUtil.deleteFile(pl.get("IMG_UPLOAD_PATH"), (String)del_file.get(i)); 
		}
		
		ArrayList conts_file = (ArrayList) jsonMap.get("conts_file");
		if(conts_file == null) { conts_file = new ArrayList();  }
	
		Log.print(LOGGER, "conts_file=[" + conts_file + "]");
		

		/*
		 * 파일이 존재 안하는 데이타는 다 지움
		 */
		String update_make_file_seq_list = new String(); 
		for(int j=0;j<conts_file.size();j++) {
			HashMap hash = (HashMap<String, Object>) conts_file.get(j);
			if(hash.containsKey("conts_file_seq")) {	
				update_make_file_seq_list += hash.get("conts_file_seq") + ",";
			}
		}
		if(update_make_file_seq_list.length() == 0) {
			update_make_file_seq_list = "ALL";
		}
		else if(update_make_file_seq_list.lastIndexOf(",") > 0) {
			update_make_file_seq_list = update_make_file_seq_list.substring(0, update_make_file_seq_list.lastIndexOf(","));
		}
		Log.print(LOGGER, "update_conts_file_seq_list=[" + update_make_file_seq_list + "]");
		jsonMap.put("make_file_seq_list", update_make_file_seq_list);
		
		int iDeleteMakeAttchFileNotFileALL = ajaxOrderMadeDAO.deleteMakeAttchFileNotFileALL(jsonMap);
		Log.print(LOGGER, "iDeleteMakeAttchFileNotFileALL=[" + iDeleteMakeAttchFileNotFileALL +"]");

		// DELEGATE_YN 값을 새로 업데이트한다.- step 2
		HashMap<String, Object> delegateInfo = new HashMap();
		delegateInfo.put("make_uid", jsonMap.get("make_uid"));
		ajaxOrderMadeDAO.updateMakeAttchFile_Delegate_yn(delegateInfo);
				
		for(int j=0;j<conts_file.size();j++) {

			HashMap<String, Object>  contents = (HashMap<String, Object>) conts_file.get(j);
			
			if(contents.get("conts_tp") == null) continue;
			
			contents.put("make_uid", jsonMap.get("make_uid"));
			
			if(contents.get("conts_file_name") != null && ((String)contents.get("conts_file_name")).length() > 0) {
				
				for(int i=0;i<ins_file.size();i++) {
					
					for(int jj=0;jj<aMultipartFile.size();jj++) {
						// 업로드된 파일명과 동일한지 체크한다.
						if(contents.get("conts_file_name").equals(ins_file.get(i)) &&
								contents.get("conts_file_name").equals(aMultipartFile.get(jj).getOriginalFilename())) {
							
							Log.print(LOGGER, "업로드할 파일명=[" +ins_file.get(i) +"]");
							String conts_save_name = FileUtil.uploadFile(pl.get("IMG_UPLOAD_PATH"), aMultipartFile.get(jj));
							jsonMap.put("make_uid", contents.get("make_uid"));
							jsonMap.put("conts_tp", contents.get("conts_tp"));
							jsonMap.put("conts_file_size", contents.get("conts_file_size"));
							jsonMap.put("p_login_id", contents.get("p_login_id"));
							jsonMap.put("conts_save_name", conts_save_name);
							jsonMap.put("conts_file_name", ins_file.get(i));
							jsonMap.put("delegate_yn", contents.get("delegate_yn"));
							
							// STL 파일이라면 몇가지 정보를 얻는다.
							if(	conts_save_name.toUpperCase().endsWith(".STL")) 
							{	
								settingSTLInformation(jsonMap, pl.get("IMG_UPLOAD_PATH"), conts_save_name);
							}
							
							Log.print(LOGGER, "## debug 01=" + jsonMap); 
							ajaxOrderMadeDAO.insertMakeAttchFile(jsonMap);
		
							break;
						}
					}
				}
				
			}
			else {
				
				// 파일이 아닌경우...
				if(contents.containsKey("conts_file_seq")) {	
					// 업데이트
					ajaxOrderMadeDAO.updateMakeAttchFile(contents);
				}
				else
				{
					Log.print(LOGGER, "## debug 02=" + contents); 
					ajaxOrderMadeDAO.insertMakeAttchFile(contents);
				}
			}
		}
		
		// DELEGATE_YN 값을 새로 업데이트한다.- step 2
		if(jsonMap.get("delegate_conts_file_seq") != null ) 
		{
			// DELEGATE_YN 값을 새로 업데이트한다.- step 2
			delegateInfo = new HashMap();
			delegateInfo.put("make_uid", jsonMap.get("make_uid"));
			delegateInfo.put("conts_file_seq", jsonMap.get("delegate_conts_file_seq"));
			delegateInfo.put("delegate_yn", "Y");
			
			Log.print(LOGGER, "DELEGATE_YN 값을 새로 업데이트한다 >> delegateInfo=" +delegateInfo );
			ajaxOrderMadeDAO.updateMakeAttchFile_Delegate_yn(delegateInfo);
		}
		
		// 견적[업체]정보(ESTIMATE_INFO) 추가(삭제 후 추가)
		if(jsonMap.get("estimateinfo_list") != null) {
			ajaxOrderMadeDAO.deleteEstimateInfo_by_make_uid(jsonMap); 
			
			ArrayList estimateinfo_list = (ArrayList) jsonMap.get("estimateinfo_list");
			for(int i=0;i<estimateinfo_list.size();i++) {
				((HashMap<String, Object>) estimateinfo_list.get(i)).put("make_uid", jsonMap.get("make_uid"));
				ajaxOrderMadeDAO.insertEstimateInfo((HashMap<String, Object>) estimateinfo_list.get(i));
			}	
		}
		
		
		
		// make_uid 기준으로 dfx, off, ply, 3ds, wr, stl, obj 관련 파일을 분석한다.
		try { convMeshProcessByMake_uid(String.valueOf(jsonMap.get("make_uid")));	} catch(Exception e) {	Log.print(LOGGER, e);	}
		
		// make_uid 를 통해서 관련 파일을 모은 압축파일을 생성한다.
		//try { makeZipFileByMake_uid(jsonMap);	} catch(Exception e) {	Log.print(LOGGER, e);	}
				
		jsonMap = new HashMap<String, Object>();
		jsonMap.put("retcode", 	"000");
		jsonMap.put("retmsg",	"정상적으로 업데이트 되었습니다.");
				
		return jsonMap;
	}	
	
	/*
	 * 주문제작 삭제
	 */
	public HashMap<String, Object> order_made_info_d(HashMap<String, Object> jsonMap, List<MultipartFile> aMultipartFile) throws Exception {
		
		HashMap<String, Object> contents3dinfo = ajaxOrderMadeDAO.selectMakeInfo(jsonMap);
		if(contents3dinfo == null) {
			jsonMap.put("retcode", 	"999");
			jsonMap.put("retmsg",	"조건에 맞는 데이타가 없습니다.");
			return jsonMap;
		}
		
		// 주문제작정보 삭제
		int ret = ajaxOrderMadeDAO.deleteMakeInfo_by_deleteButton(jsonMap);
		Log.print(LOGGER, "ajaxOrderMadeDAO.deleteMakeInfo_by_deleteButton upt=[" +ret +"]");
		
		// 견적[업체]정보(ESTIMATE_INFO) 삭제
		ret = ajaxOrderMadeDAO.deleteEstimateInfo_by_make_uid(jsonMap); 
		Log.print(LOGGER, "ajaxOrderMadeDAO.deleteEstimateInfo_by_make_uid upt=[" +ret +"]");
		
		
		jsonMap = new HashMap<String, Object>();
		jsonMap.put("retcode", 	"000");
		jsonMap.put("retmsg",	"정상적으로 삭제 되었습니다.");
				
		return jsonMap;
	}	
	
	public void makeZipFileByMake_uid(HashMap map) throws Exception {
		
		Log.print(LOGGER, "## makeZipFileByMake_uid [" + map.get("make_uid") + "]");
		
		List<?> contsfile_list = ajaxOrderMadeDAO.selectMakeAttchFileList(map);
		
		ArrayList aSaveFileName = new ArrayList();
		ArrayList aUploadFileName = new ArrayList();
		for(int i=0;i<contsfile_list.size(); i++) {
			HashMap contsfile = (HashMap)contsfile_list.get(i);
			if("01".equals(contsfile.get("conts_tp")) && 
					contsfile.get("conts_save_name") != null && ((String)contsfile.get("conts_save_name")).trim().length() > 0  &&
					contsfile.get("conts_file_name") != null && ((String)contsfile.get("conts_file_name")).trim().length() > 0  ) {
				
				aSaveFileName.add("" + contsfile.get("conts_save_name"));
				aUploadFileName.add("" + contsfile.get("conts_file_name"));
			}
		}
		
		if(aSaveFileName.size() == 0) return ;
		
		PropertyUtil pl = new PropertyUtil(PROP_FILE);
		
		String sSaveFileName[] = new String[aSaveFileName.size()];
		for(int i=0;i<aSaveFileName.size();i++ ) {
			//sFile[i] = pl.get("IMG_UPLOAD_PATH") + (String)aFile.get(i);
			sSaveFileName[i] = pl.get("IMG_UPLOAD_PATH") + (String)aSaveFileName.get(i);
		}
		
		ZIPCompress  zip = new ZIPCompress(sSaveFileName, aUploadFileName);
		zip.run(pl.get("IMG_UPLOAD_PATH") + map.get("make_uid") + ".zip");
		
		Log.print(LOGGER, "## zip create:[" + pl.get("IMG_UPLOAD_PATH") + map.get("make_uid") + ".zip" + "]");
			
	}
	
	/*
	 * 제작정보 리스트
	 */
	@Override
	public Map<String, Object> make_info_list(HashMap<String, Object> jsonMap, HttpServletRequest request) throws Exception {
		// TODO Auto-generated method stub
		int max_ret_count = jsonMap.get("max_ret_count") != null ? Integer.parseInt((String) jsonMap.get("max_ret_count")) : 24;
		 
		int pageNum = Integer.parseInt((String) jsonMap.get("page_num"));
		int start_index = (pageNum - 1) * max_ret_count;
		
		jsonMap.put("start_index", start_index);
		jsonMap.put("max_ret_count", max_ret_count);
		
		HashMap<String, Object> retMap = new HashMap<String, Object>();
		
		retMap.put("page_num", 			pageNum);
		retMap.put("max_ret_count", 	max_ret_count);
		retMap.put("start_index", 		start_index);

		List<?> make_info_list = ajaxOrderMadeDAO.selectMake_Info_List(jsonMap);
		retMap.put("make_info_list", make_info_list.size());
		if(make_info_list.size() == 0) {
			retMap.put("retcode", 	"999");
			retMap.put("retmsg",	"조건에 맞는 데이타가 없습니다.");
			return retMap;
		}
		
		
		retMap.put("make_info_list", make_info_list);
				
		retMap.put("retcode", 	"000");
		retMap.put("retmsg",	"정상적으로 조회되었습니다.");
			
		return retMap;
	}

	
	/*
	 *	견적[업체]정보(ESTIMATE_INFO) 등록/조회/수정/삭제
	 */
	@Override
	public Map<String, Object> estimate_info_reg(HashMap<String, Object> jsonMap, HttpServletRequest request) throws Exception {
		if("r".equals(jsonMap.get("crud_tp"))) 
		{
			jsonMap = ajaxOrderMadeDAO.selectEstimateInfo(jsonMap);
			if(jsonMap == null) {
				jsonMap = new HashMap<String, Object>();
				jsonMap.put("retcode", 	"991");
				jsonMap.put("retmsg",	"존재하지 않은 정보입니다.");	
			}
			else {
				jsonMap.put("retcode", 	"000");
				jsonMap.put("retmsg",	"정상 처리되었습니다.");	
			}
			return jsonMap;
		}
		
		HashMap<String, Object> userInfo = ajaxMemberDAO.selectUser_by_user_uid(jsonMap);
		if(userInfo == null)
		{
			jsonMap = new HashMap<String, Object>();
			jsonMap.put("retcode", 	"991");
			jsonMap.put("retmsg",	"존재하지 않은 사용자정보입니다.");	
			return jsonMap;
		}

		if("c".equals(jsonMap.get("crud_tp"))) 
		{
			HashMap<String, Object> selectMap = ajaxOrderMadeDAO.selectEstimateInfo(jsonMap);
			if(selectMap != null) {
				jsonMap = new HashMap<String, Object>();
				jsonMap.put("retcode", 	"991");
				jsonMap.put("retmsg",	"이미 존재하는 정보입니다.");
				return jsonMap;
			}
			
			ajaxOrderMadeDAO.insertEstimateInfo(jsonMap);
			jsonMap.put("retcode", 	"000");
			jsonMap.put("retmsg",	"정상 처리되었습니다.");	
			return jsonMap;
		}	
		else if("u".equals(jsonMap.get("crud_tp"))) 
		{
			ajaxOrderMadeDAO.updateEstimateInfo(jsonMap);
			jsonMap.put("retcode", 	"000");
			jsonMap.put("retmsg",	"정상 처리되었습니다.");
			return jsonMap;
		}
		else if("d".equals(jsonMap.get("crud_tp"))) 
		{
			ajaxOrderMadeDAO.deleteEstimateInfo(jsonMap);
			jsonMap.put("retcode", 	"000");
			jsonMap.put("retmsg",	"정상 처리되었습니다.");
			return jsonMap;
		}

		return null;
	}

	@Override
	public void setPayRequest(Map<String, Object> params, Model model, HttpSession session, HttpServletRequest request)
			throws Exception {
		// TODO Auto-generated method stub
		// 삼품주문번호생성
		// e05ee877805d42f9af9336ce605ff1ac
		UUID randomeUUID = UUID.randomUUID();
		String model_conts_tp =  (String) params.get("model_conts_tp");
		
		model_conts_tp = "model"; 
		
		String Moid = randomeUUID.toString().replaceAll("-", "");
		if("model".equals(model_conts_tp)) {
			model.addAttribute("moid", "model_" + Moid);
		}
		else if("conts".equals(model_conts_tp)) {
			model.addAttribute("moid", "conts_" + Moid);
		}
		model.addAttribute("model_conts_tp", model_conts_tp);
		
		// 구매자 전화번호
		model.addAttribute("buyertel",	 session.getAttribute("phone_num"));
		// 주소
		model.addAttribute("buyeraddr",	 session.getAttribute("road_addr") + "^" + session.getAttribute("jibun_addr") + "^" + session.getAttribute("detail_addr"));
		model.addAttribute("buyerpostno",session.getAttribute("post_code"));
		// 가맹점키
		model.addAttribute("merchantkey", "33F49GnCMS1mFYlGXisbUDzVf2ATWCl9k3R++d5hDd3Frmuos/XLx8XhXpe+LDYAbpGKZYSwtlyyLOtS/8aD7A==");
		// 상점ID
		model.addAttribute("mid", "3dbank000m");
		// 휴대폰결제 상품구분(1 : 실물,0 : 컨텐츠)
		model.addAttribute("goodscl","1");

		model.addAttribute("amt",			request.getParameter("price"));
		model.addAttribute("buyername",		session.getAttribute("p_name"));
		model.addAttribute("malluserid",	session.getAttribute("p_login_id"));
		model.addAttribute("goodsname",		request.getParameter("conts_name"));
	
		model.addAttribute("paymethod",		"CARD");
		model.addAttribute("goodscnt",		"1");
		model.addAttribute("transtype",		request.getParameter("TransType"));
		model.addAttribute("optionlist",	request.getParameter("OptionList"));
		model.addAttribute("malluserid",	session.getAttribute("p_login_id"));
		model.addAttribute("sub_id",		request.getParameter("SUB_ID"));
		
		model.addAttribute("b_user_uid",		request.getParameter("b_user_uid"));
		model.addAttribute("s_user_uid",		request.getParameter("s_user_uid"));
		model.addAttribute("s_conts_uid",		request.getParameter("s_conts_uid"));
		model.addAttribute("s_make_uid",		request.getParameter("s_make_uid"));
		
		
		HashMap map = (HashMap) model.asMap();
		
		Log.print(LOGGER, "## setPayRequest map:[" + map + "]");
		
		ajaxOrderMadeDAO.insertPayRequest(map);
	}

	@Override
	public void setPayResult(Map<String, String> params, Model model, HttpSession session, HttpServletRequest request) throws Exception {
		//String nicePayHome = "/nice/wwwroot/WEB-INF";
		//String nicePayHome = "C:\\eGovFrameDev-3.5.1-64bit/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/3dbank/WEB-INF";
		String nicePayHome = "C:\\eGovFrameDev-3.5.1-64bit/workspace/3dbank/nicePayHome";

		NicePayWebConnector connector = new NicePayWebConnector();
		
		// 1. 로그 디렉토리 생성
		connector.setNicePayHome(nicePayHome);
		
		// 2. 요청 페이지 파라메터 셋팅
		connector.setRequestData(request);
		
		// 3. 추가 파라메터 셋팅
		connector.addRequestData("MID", "3dbank000m");	// 상점아이디
		connector.addRequestData("actionType", "PY0");  // actionType : CL0 취소, PY0 승인
		connector.addRequestData("MallIP", request.getRemoteAddr());	// 상점 고유 ip
		connector.addRequestData("CancelPwd", "3dbank9!!");

		// 4. NICEPAY Lite 서버 접속하여 처리
		connector.requestAction();
		
		// 5. 결과 처리
		String resultCode = connector.getResultData("ResultCode");
		model.addAttribute("resultcode",	resultCode); // 결과코드 (정상 :3001 , 그 외 에러)
		model.addAttribute("resultmsg",		connector.getResultData("ResultMsg"));   // 결과메시지
		model.addAttribute("authdate",		connector.getResultData("AuthDate"));   // 승인일시 YYMMDDHH24mmss
		model.addAttribute("authcode",		connector.getResultData("AuthCode"));   // 승인번호
		model.addAttribute("buyername",		connector.getResultData("BuyerName"));   // 구매자명
		model.addAttribute("malluserid",	connector.getResultData("MallUserID"));   // 회원사고객ID
		String payMethod = connector.getResultData("PayMethod");
		model.addAttribute("paymethod",		payMethod);  // 결제수단
		model.addAttribute("mid",			connector.getResultData("MID"));  // 상점ID
		model.addAttribute("tid",			connector.getResultData("TID"));  // 거래ID
		model.addAttribute("moid",			connector.getResultData("Moid"));  // 주문번호
		model.addAttribute("amt",			connector.getResultData("Amt"));  // 금액
		
		model.addAttribute("cardcode",		connector.getResultData("CardCode"));			// 카드사 코드
		model.addAttribute("cardname",		connector.getResultData("CardName"));   // 결제카드사명
		model.addAttribute("cardquota",		connector.getResultData("CardQuota")); //00:일시불,02:2개월

		model.addAttribute("bankcode",		connector.getResultData("BankCode"));	// 은행 코드
		model.addAttribute("bankname",		connector.getResultData("BankName"));   // 은행명
		model.addAttribute("rcpttype",		connector.getResultData("RcptType")); //현금 영수증 타입 (0:발행되지않음,1:소득공제,2:지출증빙)
		model.addAttribute("rcptauthcode",	connector.getResultData("RcptAuthCode")); //현금영수증 승인 번호
		model.addAttribute("rcpttid",		connector.getResultData("RcptTID")); //현금 영수증 TID   

		model.addAttribute("carrier",		connector.getResultData("Carrier"));       // 이통사구분
		model.addAttribute("dstaddr",		connector.getResultData("DstAddr"));       // 휴대폰번호

		model.addAttribute("vbankbankcode", connector.getResultData("VbankBankCode"));   // 가상계좌은행코드
		model.addAttribute("vbankbankname", connector.getResultData("VbankBankName"));   // 가상계좌은행명
		model.addAttribute("vbanknum",		connector.getResultData("VbankNum"));   // 가상계좌번호
		model.addAttribute("vbankexpdate",	connector.getResultData("VbankExpDate"));   // 가상계좌입금예정일


		boolean paySuccess = false;		// 결제 성공 여부

		/** 위의 응답 데이터 외에도 전문 Header와 개별부 데이터 Get 가능 */
		if(payMethod.equals("CARD")){	//신용카드
			if(resultCode.equals("3001")) paySuccess = true;	// 결과코드 (정상 :3001 , 그 외 에러)
		}else if(payMethod.equals("BANK")){		//계좌이체
			if(resultCode.equals("4000")) paySuccess = true;	// 결과코드 (정상 :4000 , 그 외 에러)	
		}else if(payMethod.equals("CELLPHONE")){			//휴대폰
			if(resultCode.equals("A000")) paySuccess = true;	//결과코드 (정상 : A000, 그 외 비정상)
		}else if(payMethod.equals("VBANK")){		//가상계좌
			if(resultCode.equals("4100")) paySuccess = true;	// 결과코드 (정상 :4100 , 그 외 에러)
		}

		model.addAttribute("resultcode",resultCode);
		model.addAttribute("paysuccess",paySuccess);	
		
		model.addAttribute("proc_st",  "01"); // 승인상태

		HashMap<String, Object> map = (HashMap<String, Object>) model.asMap();
		
		Log.print(LOGGER, "## setPayResult map:[" + map + "]");
		
		ajaxOrderMadeDAO.insertPayResult(map);
		
		if(paySuccess){
		   // 결제 성공시 
		}else{
		   // 결제 실패시 
		}
	}

	@Override
	public Map<String, Object> pay_list(HashMap<String, Object> jsonMap, HttpServletRequest request) throws Exception {
		HashMap<String, Object> retMap = new HashMap<String, Object>();
		
				
		HashMap<String, Object> totalMap = ajaxOrderMadeDAO.select_pay_list_total_cnt(jsonMap);
		System.out.println(">>>>>>>> totalMap : " + totalMap);
		if (totalMap == null || (long) totalMap.get("total_cnt") <= 0) {
			retMap = new HashMap<String, Object>();
			retMap.put("retcode", "991");
			retMap.put("retmsg", "데이터가 존재하지 않습니다.");
			
			return retMap;
		}
		retMap.put("total_cnt", totalMap.get("total_cnt"));
		retMap.put("total_amt", totalMap.get("total_amt"));
		
		int max_ret_count = jsonMap.get("max_ret_count") != null ? Integer.parseInt((String) jsonMap.get("max_ret_count")) : 24;
		int pageNum = Integer.parseInt((String) jsonMap.get("page_num"));
		int start_index = (pageNum - 1) * max_ret_count;
		
		jsonMap.put("start_index", start_index);
		jsonMap.put("max_ret_count", max_ret_count);
		
		List<?> payList = ajaxOrderMadeDAO.select_pay_list(jsonMap);
		retMap.put("pay_list", payList);
		retMap.put("retcode", "000");
		retMap.put("retmsg", "정상적으로 조회되었습니다.");
		
		return retMap;
	}

	@Override
	public Map<String, Object> pay_calculate_list(HashMap<String, Object> jsonMap, HttpServletRequest request) throws Exception {
		HashMap<String, Object> retMap = new HashMap<String, Object>();

		HashMap<String, Object> totalMap = ajaxOrderMadeDAO.pay_calculate_list_total_cnt(jsonMap);
		System.out.println(">>>>>>>> totalMap : " + totalMap);
		if (totalMap == null || (long) totalMap.get("total_cnt") <= 0) {
			retMap = new HashMap<String, Object>();
			retMap.put("retcode", "991");
			retMap.put("retmsg", "데이터가 존재하지 않습니다.");
			
			return retMap;
		}
		retMap.put("s_amt", totalMap.get("s_amt"));
		retMap.put("s_fees", totalMap.get("s_fees"));
		retMap.put("s_taxt", totalMap.get("s_tax"));
		retMap.put("total_cnt", totalMap.get("total_cnt"));
		
		int max_ret_count = jsonMap.get("max_ret_count") != null ? Integer.parseInt((String) jsonMap.get("max_ret_count")) : 24;
		int pageNum = Integer.parseInt((String) jsonMap.get("page_num"));
		int start_index = (pageNum - 1) * max_ret_count;
		System.out.println("max_ret_count" + max_ret_count);
		System.out.println("pageNum" + pageNum);
		System.out.println("start_index" + start_index);
		jsonMap.put("start_index", start_index);
		jsonMap.put("max_ret_count", max_ret_count);
		
		List<?> pay_calculate_list = ajaxOrderMadeDAO.pay_calculate_list(jsonMap);
		retMap.put("pay_calculate_list", pay_calculate_list);
		retMap.put("retcode", "000");
		retMap.put("retmsg", "정상적으로 조회되었습니다.");
		System.out.println("payList" + pay_calculate_list);
		return retMap;
	}
	@Override
	public Map<String, Object> refund_list(HashMap<String, Object> jsonMap, HttpServletRequest request) throws Exception {
		HashMap<String, Object> retMap = new HashMap<String, Object>();
		
		if("u".equals(jsonMap.get("crud_tp"))) 
		{
			ajaxOrderMadeDAO.updateRefundInfo(jsonMap);
			retMap.put("retcode", 	"000");
			retMap.put("retmsg",	"정상 처리되었습니다.");
			
		} else {
			int total_cnt = ajaxOrderMadeDAO.refund_list_total_cnt(jsonMap);
			if (total_cnt <= 0) {
				retMap.put("retcode", "991");
				retMap.put("retmsg", "데이터가 존재하지 않습니다.");
				return retMap;
			}
			retMap.put("total_cnt", total_cnt);
			
			int max_ret_count = jsonMap.get("max_ret_count") != null ? Integer.parseInt((String) jsonMap.get("max_ret_count")) : 24;
			int pageNum = Integer.parseInt((String) jsonMap.get("page_num"));
			int start_index = (pageNum - 1) * max_ret_count;
			
			jsonMap.put("start_index", start_index);
			jsonMap.put("max_ret_count", max_ret_count);
			
			List<?> refund_list = ajaxOrderMadeDAO.refund_list(jsonMap);
			retMap.put("refund_list", refund_list);
			retMap.put("retcode", "000");
			retMap.put("retmsg", "정상적으로 조회되었습니다.");
			
			System.out.println("refund_list" + refund_list);
		}
		return retMap;
	}

	@Override
	public Map<String, Object> deposit_list(HashMap<String, Object> jsonMap, HttpServletRequest request) throws Exception {
		HashMap<String, Object> retMap = new HashMap<String, Object>();
		
		
		HashMap<String, Object> totalMap = ajaxOrderMadeDAO.select_deposit_list_total_cnt(jsonMap);
		if (totalMap == null || (long) totalMap.get("total_cnt") <= 0) {
			retMap = new HashMap<String, Object>();
			retMap.put("retcode", "991");
			retMap.put("retmsg", "데이터가 존재하지 않습니다.");
			
			return retMap;
		}
		retMap.put("total_cnt", totalMap.get("total_cnt"));
		retMap.put("total_amt", totalMap.get("total_amt"));
		int max_ret_count = jsonMap.get("max_ret_count") != null ? Integer.parseInt((String) jsonMap.get("max_ret_count")) : 24;
		int pageNum = Integer.parseInt((String) jsonMap.get("page_num"));
		int start_index = (pageNum - 1) * max_ret_count;
		
		jsonMap.put("start_index", start_index);
		jsonMap.put("max_ret_count", max_ret_count);
		
		List<?> payList = ajaxOrderMadeDAO.select_deposit_list(jsonMap);
		retMap.put("pay_list", payList);
		retMap.put("retcode", "000");
		retMap.put("retmsg", "정상적으로 조회되었습니다.");
		
		return retMap;
	}

	@Override
	public void setCancelResult(Map<String, String> params, Model model, HttpSession session, HttpServletRequest request) {
		NicePayWebConnector connector = new NicePayWebConnector();
		
		// 1. 로그 디렉토리 생성
		String nicePayHome = "/data/3dbank/nicepay_logs";
		connector.setNicePayHome(nicePayHome);

		// 2. 요청 페이지 파라메터 셋팅
		connector.setRequestData(request);
		
		// 3. 추가 파라메터 셋팅
		connector.addRequestData("MID", "3dbank000m");
		connector.addRequestData("actionType", "CL0");
		connector.addRequestData("CancelPwd", "3dbank9!!");
		connector.addRequestData("CancelIP", request.getRemoteAddr());
		
		// 4. NICEPAY Lite 서버 접속하여 처리
		connector.requestAction();
		
		// 5. 결과 처리
		String TID = connector.getResultData("TID");
		String moid = request.getParameter("moid");
		
		model.addAttribute("ResultCode", connector.getResultData("ResultCode")); 	// 결과코드 (정상 :2001(취소성공), 2002(취소진행중), 그 외 에러)
		model.addAttribute("ResultMsg", connector.getResultData("ResultMsg"));   		// 결과메시지
		model.addAttribute("CancelAmt", connector.getResultData("CancelAmt")); 		// 취소금액
		model.addAttribute("CancelDate", connector.getResultData("CancelDate")); 	// 취소일
		model.addAttribute("CancelTime", connector.getResultData("CancelTime")); 	// 취소시간
		model.addAttribute("CancelNum", connector.getResultData("CancelNum")); 	// 취소번호
		model.addAttribute("PayMethod", connector.getResultData("PayMethod")); 	// 취소 결제수단
		model.addAttribute("MID", connector.getResultData("MID")); 				// 상점 ID
		model.addAttribute("TID", TID); 				// TID
		model.addAttribute("ErrorCD", connector.getResultData("ErrorCD")); 		// 상세 에러코드
		model.addAttribute("ErrorCD", connector.getResultData("ErrorMsg")); 	// 상세 에러메시지
		model.addAttribute("AuthDate", connector.getResultData("AuthDate"));	// 거래시간
		model.addAttribute("PartialCancelCode", request.getParameter("PartialCancelCode"));	
		model.addAttribute("CancelPwd", "3dbank9!!");	// 취소 비밀번호
		model.addAttribute("moid", moid);
		
		try {
			HashMap<String, Object> map = (HashMap<String, Object>) model.asMap();
			int paySeq = ajaxOrderMadeDAO.insert_cancel_info(map);
			
			if (paySeq > 0) {
				map.put("refund_seq", paySeq);
				map.put("TID", TID);
				ajaxOrderMadeDAO.updateRefundInfo(map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public Map<String, Object> refund_reg(HashMap<String, Object> jsonMap, HttpServletRequest request) throws Exception {
		HashMap<String, Object> retMap = new HashMap<String, Object>();
		
		if("r".equals(jsonMap.get("crud_tp"))) {
			retMap = ajaxOrderMadeDAO.select_refund_info(jsonMap);
			if (retMap == null) {
				retMap = new HashMap<String, Object>();
				retMap.put("retcode", "991");
				retMap.put("retmsg", "데이터가 존재하지 않습니다.");
				
				return retMap;
			}
			retMap.put("retcode", "000");
			jsonMap.put("retmsg", "정상적으로 조회되었습니다.");
			
		} else if("u".equals(jsonMap.get("crud_tp"))) {
			ajaxOrderMadeDAO.update_refund_info(jsonMap);
			
			jsonMap.put("proc_st", jsonMap.get("refund_st"));
			ajaxOrderMadeDAO.updateMakeInfo(jsonMap);
			
			retMap.put("retcode", "000");
			retMap.put("retmsg",	"정상 처리되었습니다.");	
		}
		return retMap;
	}
}
