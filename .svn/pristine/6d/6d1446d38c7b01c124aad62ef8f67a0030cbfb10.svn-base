/**
 * Loads a Wavefront .obj file with materials
 *
 * @author mrdoob / http://mrdoob.com/
 * @author angelxuanchang
 */

THREE.OBJMTLLoader = function () {};

THREE.OBJMTLLoader.prototype = {

	constructor: THREE.OBJMTLLoader,

	/**
	 * Load a Wavefront OBJ file with materials (MTL file)
	 *
	 * Loading progress is indicated by the following events:
	 *   "load" event (successful loading): type = 'load', content = THREE.Object3D
	 *   "error" event (error loading): type = 'load', message
	 *   "progress" event (progress loading): type = 'progress', loaded, total
	 *
	 * If the MTL file cannot be loaded, then a MeshLambertMaterial is used as a default
	 * @param url - Location of OBJ file to load
	 * @param mtlfileurl - MTL file to load (optional, if not specified, attempts to use MTL specified in OBJ file)
	 * @param options - Options on how to interpret the material (see THREE.MTLLoader.MaterialCreator )
	 */

	load: function ( url, mtlfileurl, options ) {

		var scope = this;
		var xhr = new XMLHttpRequest();

		var mtlDone;           // Is the MTL done (true if no MTL, error loading MTL, or MTL actually loaded)
		var obj3d;             // Loaded model (from obj file)
		var materialsCreator;  // Material creator is created when MTL file is loaded

		// Loader for MTL

		var mtlLoader = new THREE.MTLLoader( url.substr( 0, url.lastIndexOf( "/" ) + 1 ), options );
		mtlLoader.addEventListener( 'load', waitReady );
		mtlLoader.addEventListener( 'error', waitReady );

		// Try to load mtlfile

		if ( mtlfileurl ) {

			mtlLoader.load( mtlfileurl );
			mtlDone = false;

		} else {

			mtlDone = true;

		}

		function waitReady( event ) {

			if ( event.type === 'load' ) {

				if ( event.content instanceof THREE.MTLLoader.MaterialCreator ) {

					// MTL file is loaded

					mtlDone = true;
					materialsCreator = event.content;
					materialsCreator.preload();

				} else {

					// OBJ file is loaded

					if ( event.target.status === 200 || event.target.status === 0 ) {

						var objContent = event.target.responseText;

						if ( mtlfileurl ) {

							// Parse with passed in MTL file

							obj3d = scope.parse( objContent );

						} else {

							// No passed in MTL file, look for mtlfile in obj file

							obj3d = scope.parse( objContent, function( mtlfile ) {

								mtlDone = false;
								mtlLoader.load( mtlLoader.baseUrl + mtlfile );

							} );

						}

					} else {

						// Error loading OBJ file....

						scope.dispatchEvent( {
							type: 'error',
							message: 'Couldn\'t load URL [' + url + ']',
							response: event.target.responseText } );

					}

				}

			} else if ( event.type === 'error' ) {

				// MTL failed to load -- oh well, we will just not have material ...

				mtlDone = true;

			}

			if ( mtlDone && obj3d ) {

				// MTL file is loaded and OBJ file is loaded
				// Apply materials to model
				var materials=[];
				if ( materialsCreator ) 
				{
					var materials=[];
					obj3d.traverse( function( object ) 
					{
						if ( object instanceof THREE.Mesh ) 
						{
							
							var materialNames=object.materialNames;
							for(var materialNameIndex=0;materialNameIndex<materialNames.length;materialNameIndex++)
							{
								var materialName=materialNames[materialNameIndex];
								var material=materials[materialName];
								if(!material)
								{
									material=materialsCreator.create(materialName);
									materials[materialName]=material;
								}
								material.name=materialName;
								materials.push(material);
							}
							var meshMaterial=new THREE.MeshFaceMaterial(materials);
							object.material=meshMaterial;
						}

					} );

				}

				// Notify listeners

				scope.dispatchEvent( { type: 'load', content: obj3d } );
			}

		}

		xhr.addEventListener( 'load', waitReady, false );

		xhr.addEventListener( 'progress', function ( event ) {

			scope.dispatchEvent( { type: 'progress', loaded: event.loaded, total: event.total } );

		}, false );

		xhr.addEventListener( 'error', function () {

			scope.dispatchEvent( { type: 'error', message: 'Couldn\'t load URL [' + url + ']' } );

		}, false );
		
		xhr.onload = function() {
			$('.wrap-loading').hide();
		};

		xhr.open( 'GET', url, true );
		xhr.send( null );

	},

	/**
	 * Parses loaded .obj file
	 * @param data - content of .obj file
	 * @param mtllibCallback - callback to handle mtllib declaration (optional)
	 * @return {THREE.Object3D} - Object3D (with default material)
	 */

	parse: function ( data, mtllibCallback ) 
	{

		// fixes

		data = data.replace( /\ \\\r\n/g, '' ); // rhino adds ' \\r\n' some times.

		var replacement = '/f$1$2$4\n/f$2$3$4'; // quads to tris
		data = data.replace( /f( +\d+)( +\d+)( +\d+)( +\d+)/g, replacement );
		data = data.replace( /f( +\d+\/\d+)( +\d+\/\d+)( +\d+\/\d+)( +\d+\/\d+)/g, replacement );
		data = data.replace( /f( +\d+\/\d+\/\d+)( +\d+\/\d+\/\d+)( +\d+\/\d+\/\d+)( +\d+\/\d+\/\d+)/g, replacement );
		data = data.replace( /f( +\d+\/\/\d+)( +\d+\/\/\d+)( +\d+\/\/\d+)( +\d+\/\/\d+)/g, replacement );

		//

		function vector( x, y, z ) 
		{
			return new THREE.Vector3( x, y, z );
		}

		function uv( u, v ) 
		{
			return new THREE.Vector2( u, v );
		}

		function face3( a, b, c, normals ) 
		{
			return new THREE.Face3( a, b, c, normals );
		}

		function meshN( meshName, materialName ) 
		{

			if ( geometry.vertices.length > 0 ) 
			{

				geometry.mergeVertices();
				geometry.computeCentroids();
				geometry.computeFaceNormals();
				geometry.computeBoundingSphere();

				object.add( mesh );

				geometry = new THREE.Geometry();
				mesh = new THREE.Mesh( geometry, material );

				verticesCount = 0;

			}

			if ( meshName !== undefined ) 
				mesh.name = meshName;
			
			if ( materialName !== undefined ) 
			{
				material = new THREE.MeshLambertMaterial();
				material.name = materialName;
				mesh.material = material;
			}
		}

		
		var materials=[];
		/*
		this.addMaterial=function addMaterial(materialName)
		{
			if(!materials[materialName])
			{
				console.log("Create material " + materialName);
				//materials[materialName]=materialsCreator.create(materialName);
			}
		
		}
		*/
		
		var group = new THREE.Object3D();
		var object = group;
		
		
		
		function MeshObject()
		{
			this.vertices=[];
			this.faces=[];
			this.normals=[];
			this.uvs=[];
			this.vertexUvs=[];
			this.materialNames=[];
			this.currentMaterialIndex=null;
			this.name="undefined";
			//this.materials=[];
			//this.material=new THREE.MeshFaceMaterial();
			
			this.setCurrentMaterialName=function setCurrentMaterialName(materialName)
			{
				var materialIndex=this.materialNames.indexOf(materialName);
				if(materialIndex==-1)
				{
					this.materialNames.push(materialName);
					//this.materials.push(materials[materialName]);
				}
				this.currentMaterialIndex=this.materialNames.indexOf(materialName);
			}
			
			this.addVertex=function addVertex(x,y,z)
			{
				this.vertices.push(new THREE.Vector3(x,y,z));
			}
			
			this.addNormal=function addNormal(x,y,z)
			{
				this.normals.push(new THREE.Vector3(x,y,z));
			}
			
			this.addUV=function addUV(u,v)
			{
				this.uvs.push(new THREE.Vector2(u,v));
			}
			
			this.addVertexUV=function addVertexUV(vertexUV)
			{
				this.vertexUvs.push([this.uvs[vertexUV[0]],this.uvs[vertexUV[1]],this.uvs[vertexUV[2]]]);
			}
			
			this.addFace=function addFace(vertices,normals)
			{
				var face=new THREE.Face3(vertices[0],vertices[1],vertices[2],normals,null,this.currentMaterialIndex);
				this.faces.push(face);
			}
			
			this.buildMesh=function buildMesh()
			{
				var geometry = new THREE.Geometry();
				var material = new THREE.MeshFaceMaterial();
				
				var faces=[];
				var vertexUvs=[];
				
				//Optimisation
				console.log(this.materialNames);
				for(var materialIndex=0;materialIndex<this.materialNames.length;materialIndex++)
				{
					for(var faceIndex=0;faceIndex<this.faces.length;faceIndex++)
					{
						var face=this.faces[faceIndex];
						if(face.materialIndex==materialIndex)
						{
							faces.push(face);
							vertexUvs.push(this.vertexUvs[faceIndex]);
						}
					}
				}
				
				
				geometry.vertices=this.vertices;
				geometry.faces=faces;
				geometry.faceVertexUvs[0]=vertexUvs;
				
				geometry.mergeVertices();
				geometry.computeCentroids();
				geometry.computeFaceNormals();
				geometry.computeBoundingSphere();
				console.log("build Mesh");
				var mesh = new THREE.Mesh(geometry,material);
				mesh.materialNames=this.materialNames;
				mesh.name=this.name;
				return mesh;
			}
			
		}

		var meshObject=new MeshObject();
		var lastPattern=null;
		
		
		/*
		var geometry = new THREE.Geometry();
		var material = new THREE.MeshLambertMaterial();
		var mesh = new THREE.Mesh( geometry, material );

		var vertices = [];
		var verticesCount = 0;
		var normals = [];
		var uvs = [];
		*/
		
		
		// v float float float
		var vertex_pattern = /v( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/;

		// vn float float float
		var normal_pattern = /vn( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/;

		// vt float float
		var uv_pattern = /vt( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/

		// f vertex vertex vertex
		var face_pattern1 = /f( +\d+)( +\d+)( +\d+)/

		// f vertex/uv vertex/uv vertex/uv
		var face_pattern2 = /f( +(\d+)\/(\d+))( +(\d+)\/(\d+))( +(\d+)\/(\d+))/;

		// f vertex/uv/normal vertex/uv/normal vertex/uv/normal
		var face_pattern3 = /f( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))/;

		// f vertex//normal vertex//normal vertex//normal
		var face_pattern4 = /f( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))/;

		var lines = data.split( "\n" );

		for ( var i = 0; i < lines.length; i ++ ) 
		{

			var line = lines[i];
			line = line.trim();

			var result;

			if ( line.length === 0 || line.charAt( 0 ) === '#' ) 
				continue;
				

			// ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
			if ( ( result = vertex_pattern.exec( line ) ) !== null ) 
			{
			/*
				if(lastPattern!="v")
				{
					if(meshObject)
						group.add(meshObject.buildMesh());
					meshObject=new MeshObject();
				}
			*/
				meshObject.addVertex(parseFloat(result[1]),parseFloat(result[2]),parseFloat(result[3]));
				lastPattern="v";
				/*
				meshObject.vertices.push
				( 
					vector
					(
						parseFloat( result[ 1 ] ),
						parseFloat( result[ 2 ] ),
						parseFloat( result[ 3 ] )
					) 
				);
				*/
				continue;
			}
			
			
			// ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
			if ( ( result = normal_pattern.exec( line ) ) !== null ) 
			{
				meshObject.addNormal(parseFloat(result[1]),parseFloat(result[2]),parseFloat(result[3]));
				lastPattern="vn";
				/*
				meshObject.normals.push
				( 
					vector
					(
						parseFloat( result[ 1 ] ),
						parseFloat( result[ 2 ] ),
						parseFloat( result[ 3 ] )
					) 
				);
				*/
				continue;
			} 
			
			
			// ["vt 0.1 0.2", "0.1", "0.2"]
			if ( ( result = uv_pattern.exec( line ) ) !== null ) 
			{
				meshObject.addUV(parseFloat(result[1]),parseFloat(result[2]));
				lastPattern="vt";
				/*
				meshObject.uvs.push
				( 
					uv
					(
						parseFloat( result[ 1 ] ),
						parseFloat( result[ 2 ] )
					) 
				);
				*/
				
				continue;
			}
			
			
			
			// ["f 1 2 3", "1", "2", "3"]
			if ( ( result = face_pattern1.exec( line ) ) !== null ) 
			{
			/*
				geometry.vertices.push
				(
					vertices[ parseInt( result[ 1 ] ) - 1 ],
					vertices[ parseInt( result[ 2 ] ) - 1 ],
					vertices[ parseInt( result[ 3 ] ) - 1 ]
				);
					
				geometry.faces.push(face3(verticesCount++,verticesCount++,verticesCount++));
				*/
				var faceVertices=[parseInt(result[1])-1,parseInt(result[2])-1,parseInt(result[3])-1];
				var faceVertexUV=[0,0,0];
				meshObject.addFace(faceVertices,null);
				meshObject.addVertexUV(faceVertexUV);
				lastPattern="f";
				
				continue;
			} 
			

			// ["f 1/1 2/2 3/3", " 1/1", "1", "1", " 2/2", "2", "2", " 3/3", "3", "3"]
			if ( ( result = face_pattern2.exec( line ) ) !== null ) 
			{
			/*
				geometry.vertices.push
				(
					vertices[ parseInt( result[ 2 ] ) - 1 ],
					vertices[ parseInt( result[ 5 ] ) - 1 ],
					vertices[ parseInt( result[ 8 ] ) - 1 ]
				);

				geometry.faces.push( face3(verticesCount++,verticesCount ++,verticesCount++));

				geometry.faceVertexUvs[ 0 ].push
				( 
					[
						uvs[ parseInt( result[ 3 ] ) - 1 ],
						uvs[ parseInt( result[ 6 ] ) - 1 ],
						uvs[ parseInt( result[ 9 ] ) - 1 ]
					]
				);
				*/
				var faceVertices=[parseInt(result[2])-1,parseInt(result[5])-1,parseInt(result[8])-1];
				var faceVertexUV=[parseInt(result[3])-1,parseInt(result[6])-1,parseInt(result[9])-1];
				
				meshObject.addFace(faceVertices,null);
				meshObject.addVertexUV(faceVertexUV);
				lastPattern="f";
				
				continue;
			}
			
			
			
			// ["f 1/1/1 2/2/2 3/3/3", " 1/1/1", "1", "1", "1", " 2/2/2", "2", "2", "2", " 3/3/3", "3", "3", "3"]
			if ( ( result = face_pattern3.exec( line ) ) !== null ) 
			{
				/*
				geometry.vertices.push
				(
					vertices[ parseInt( result[ 2 ] ) - 1 ],
					vertices[ parseInt( result[ 6 ] ) - 1 ],
					vertices[ parseInt( result[ 10 ] ) - 1 ]
				);
				*/
				
				/*
				geometry.faces.push
				( 
					face3
					(
						verticesCount++,
						verticesCount++,
						verticesCount++,
						[
							normals[ parseInt( result[ 4 ] ) - 1 ],
							normals[ parseInt( result[ 8 ] ) - 1 ],
							normals[ parseInt( result[ 12 ] ) - 1 ]
						]
					)
				);

				geometry.faceVertexUvs[ 0 ].push
				(
					[
						uvs[ parseInt( result[ 3 ] ) - 1 ],
						uvs[ parseInt( result[ 7 ] ) - 1 ],
						uvs[ parseInt( result[ 11 ] ) - 1 ]
					]
				);
				*/
				var faceVertices=[parseInt(result[2])-1,parseInt(result[6])-1,parseInt(result[10])-1];
				var faceNormals=[meshObject.normals[parseInt(result[4])-1],meshObject.normals[parseInt(result[8])-1],meshObject.normals[parseInt(result[12])-1]];
				var faceVertexUV=[parseInt(result[3])-1,parseInt(result[7])-1,parseInt(result[11])-1];
				
				meshObject.addFace(faceVertices,faceNormals);
				meshObject.addVertexUV(faceVertexUV);
				lastPattern="f";
				//meshObject.addUV()
				
				
				continue;

			}
			
			// ["f 1//1 2//2 3//3", " 1//1", "1", "1", " 2//2", "2", "2", " 3//3", "3", "3"]
			if ( ( result = face_pattern4.exec( line ) ) !== null ) 
			{
			/*
				geometry.vertices.push
				(
					vertices[ parseInt( result[ 2 ] ) - 1 ],
					vertices[ parseInt( result[ 5 ] ) - 1 ],
					vertices[ parseInt( result[ 8 ] ) - 1 ]
				);

				geometry.faces.push
				( 
					face3
					(
						verticesCount ++,
						verticesCount ++,
						verticesCount ++,
						[
							normals[ parseInt( result[ 3 ] ) - 1 ],
							normals[ parseInt( result[ 6 ] ) - 1 ],
							normals[ parseInt( result[ 9 ] ) - 1 ]
						]
					)
				);
				
				continue;
				*/
				
				var faceVertices=[parseInt(result[2])-1,parseInt(result[5])-1,parseInt(result[8])-1];
				var faceNormals=[meshObject.normals[parseInt(result[3])-1],meshObject.normals[parseInt(result[6])-1],meshObject.normals[parseInt(result[9])-1]];
				var faceVertexUV=[0,0,0];
				
				meshObject.addFace(faceVertices,faceNormals);
				meshObject.addVertexUV(faceVertexUV);
				
				lastPattern="f";
				continue;
			} 
			
			// object
			if ( /^o /.test( line ) ) 
			{
			/*
				object = new THREE.Object3D();
				object.name = line.substring( 2 ).trim();
				group.add( object );
				*/
				lastPattern="o";
				continue;
			} 
			
			// group
			if ( /^g /.test( line ) ) 
			{
				//meshN( line.substring( 2 ).trim(), undefined );
				var groupName=line.substring( 2 ).trim();
				meshObject.name=groupName;
				/*var newMeshObject=new MeshObject();
				newMeshObject.name=groupName;
				newMeshObject.vertices=meshObject.vertices;
				newMeshObject.normals=meshObject.normals;
				newMeshObject.uvs=meshObject.uvs;
				newMeshObject.vertices=meshObject.meshObject;*/
				
				
				
				/*
					this.vertices=[];
			this.faces=[];
			this.normals=[];
			this.uvs=[];
			this.vertexUvs=[];
			this.materialNames=[];
			this.currentMaterialIndex=null;
			this.name="undefined";
			*/
				/*
				group.add(meshObject.buildMesh());
				group.name=groupName;
				meshObject=new MeshObject();
				meshObject.name=groupName;
				*/
				lastPattern="g";
				continue;

			}
			
			// material
			if ( /^usemtl /.test( line ) ) 
			{
				//meshN( undefined, line.substring( 7 ).trim() );
				var materialName=line.substring( 7 ).trim();
				//this.addMaterial(materialName);
				meshObject.setCurrentMaterialName(materialName);
				lastPattern="usemtl";
				continue;

			}
			
			// mtl file
			if ( /^mtllib /.test( line ) ) 
			{
				if ( mtllibCallback )
				{
					var mtlfile = line.substring( 7 );
					mtlfile = mtlfile.trim();
					mtllibCallback( mtlfile );
				}
				lastPattern="mtllib";

				continue;
			}
			
			// Smooth shading
			if ( /^s /.test( line ) ) 
			{
				lastPattern="s";
				continue;
				
			}
			
			console.log( "THREE.OBJMTLLoader: Unhandled line " + line );

		}
		
		

		//Add last object
		//meshN(undefined, undefined);
		
		//Create mesh
		//var outputMesh=meshObject.buildMesh();
		//console.log(outputMesh);
		//console.log("Loading finished");
		//if(meshObject.vertices.length>0)
		group.add(meshObject.buildMesh());
		console.log(group);;
		return group;
	}

};

THREE.EventDispatcher.prototype.apply( THREE.OBJMTLLoader.prototype );
